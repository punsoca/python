ACTUAL RUN RESULTS
------------------

1) function 'call_func_twice_no_threading()' - one function called twice, no threading.
   RESULT:  Total execution time is approximately 2 seconds (2.01) - one second per call.

(begin)
... Executing Function "call_func_twice_no_threading()" ...

Sleeping one second...
Done sleeping.
Sleeping one second...
Done sleeping.
Total execution time is 2.01 second(s)

... Function "call_func_twice_no_threading()" completed!
(end)

2) function 'run_two_threads_async()' - create two threads to run the same function.
   RESULT:  Total execution time shows 0.00 seconds. This is because the threading function does not specify to WAIT 
            for the threads to finish execution before proceeding to execute the rest of the lines in the function.
            NOTE that 'Done sleeping...' shows up after the 'Finish executing our two threads' is printed.

(begin)
... Executing Function "run_two_threads_async()" ...

Sleeping one second...
Sleeping one second...
Finish executing our two threads
Total execution time is 0.0 second(s)
Done sleeping.
Done sleeping.

... Function "run_two_threads_async()" completed!
(end)

3) function 'run_two_threads_with_join()' - create two threads to run the same function - this time using the .join() method.
   The .join() method tells Python to wait until the thread(s) finish execution before executing the rest of the script.
   RESULT:  (a) Total execution time shows 1.00 seconds - showing that the two threads were able to run in parallel.
            (b) Note that the print statements are now showing the expected order - 'Done sleep' now comes BEFORE 
               'Finish executing our two threads' is printed.

(begin)
... Executing Function "run_two_threads_with_join()" ...

Sleeping one second...
Sleeping one second...
Done sleeping.
Done sleeping.
Finish executing our two threads with .join() method
Total execution time is 1.0 second(s)

... Function "run_two_threads_with_join()" completed!
(end)

4) function 'run_ten_threads_with_threadlist()' - creating 10 threads using a threadlist. Each thread running with sleep timer of one second.
   NOTE: This function calls the target function 'do_something_with_thread_name' that assigns a thread name dynamically and prints it to 
   demonstrate that one thread that starts executing first DOES NOT NECESSARILY finish first as well.
   RESULT:  Each start and sleep statements show a thread name to show us which thread starts and done sleeping in chronological order.
            Total execution time shows ~ 1.00 seconds - demonstrating that ALL 10 THREADS were able to run concurrently.

(begin)
... Executing Function "run_ten_threads_with_threadlist()" ...

Thread-5  sleeping one second...
Thread-6  sleeping one second...
Thread-7  sleeping one second...
Thread-8  sleeping one second...
Thread-9  sleeping one second...
Thread-10  sleeping one second...
Thread-11  sleeping one second...
Thread-12  sleeping one second...
Thread-13  sleeping one second...
Thread-14  sleeping one second...
Thread-5  is done sleeping.
Thread-6  is done sleeping.
Thread-7  is done sleeping.
Thread-8  is done sleeping.
Thread-9  is done sleeping.
Thread-10  is done sleeping.
Thread-11  is done sleeping.
Thread-13  is done sleeping.
Thread-12  is done sleeping.
Thread-14  is done sleeping.
Total execution time is 1.0 second(s)

... Function "run_ten_threads_with_threadlist()" completed!
(end)

5) function 'conc_futures_threading' - using 'concurrent.futures.ThreadPool' class' executor object to create 'future' objects when running submit() method.
   Each future object is assigned a different time.sleep() value by the executor.submit method(). 
   RESULT:  Total execution time shows ~ 1.00 seconds - demonstrating that the all 10 futures object in the ThreadPool were able to run concurrently.

(begin)
... Executing Function "conc_futures_threading()" ...
Sleeping 0.5 second(s)...
Sleeping 1.25 second(s)...
Sleeping 1.5 second(s)...
Sleeping 1.75 second(s)...
Sleeping 2 second(s)...
Done sleeping 0.5 seconds.
Done sleeping 1.25 seconds.
Done sleeping 1.5 seconds.
Done sleeping 1.75 seconds.
Done sleeping 2 seconds.
Total execution time is 2.01 second(s)

... Function "conc_futures_threading()" completed!
(end)

6) function 'conc_futures_thrd_context_mgr' - same as 'conc_futures_threading' function but written as context manager.
   RESULT:  Same result as 'conc_futures_threading' function, with total execution time ~ 2 seconds (with difference only in milliseconds)

(begin)
... Executing Function "conc_futures_thrd_context_mgr()" ...

Sleeping 0.5 second(s)...
Sleeping 1.25 second(s)...
Sleeping 1.5 second(s)...
Sleeping 1.75 second(s)...
Sleeping 2 second(s)...
Done sleeping 0.5 seconds.
Done sleeping 1.25 seconds.
Done sleeping 1.5 seconds.
Done sleeping 1.75 seconds.
Done sleeping 2 seconds.
Total execution time is 2.0 second(s)

... Function "conc_futures_thrd_context_mgr()" completed!
(end)

7) function 'conc_futures_thrd_as_completed' - using the concurrent.futures 'as_completed' method.
   Creates 10 futures objects with varying time.sleep() value, longest of which is five seconds.
   RESULT:  Total execution time is still ~ 5 seconds (with difference only in milliseconds).

(begin)
... Executing Function "conc_futures_thrd_as_completed()" ...
Sleeping 5 second(s)...
Sleeping 4 second(s)...
Sleeping 3 second(s)...
Sleeping 2 second(s)...
Sleeping 1 second(s)...
Sleeping 2 second(s)...
Sleeping 3 second(s)...
Sleeping 4 second(s)...
Sleeping 1 second(s)...
Sleeping 5 second(s)...
Done sleeping 1 seconds.
Done sleeping 1 seconds.
Done sleeping 2 seconds.
Done sleeping 2 seconds.
Done sleeping 3 seconds.
Done sleeping 3 seconds.
Done sleeping 4 seconds.
Done sleeping 4 seconds.
Done sleeping 5 seconds.
Done sleeping 5 seconds.
Total execution time is 5.0 second(s)

... Function "conc_futures_thrd_as_completed()" completed!
(end)

8) function 'conc_futures_thrd_with_executor_map' - using the executor.map() to replace executor.submit() in creating futures objects.
   Creates 10 futures objects with varying time.sleep() value, longest of which is five seconds.
   RESULT:  Total execution time is still ~ 5 seconds (with difference only in milliseconds).

(begin)
... Executing Function "conc_futures_thrd_with_executor_map()" ...

Sleeping 5 second(s)...
Sleeping 4 second(s)...
Sleeping 3 second(s)...
Sleeping 2 second(s)...
Sleeping 1 second(s)...
Sleeping 2 second(s)...
Sleeping 3 second(s)...
Sleeping 4 second(s)...
Sleeping 1 second(s)...
Sleeping 5 second(s)...
Done sleeping 5 seconds.
Done sleeping 4 seconds.
Done sleeping 3 seconds.
Done sleeping 2 seconds.
Done sleeping 1 seconds.
Done sleeping 2 seconds.
Done sleeping 3 seconds.
Done sleeping 4 seconds.
Done sleeping 1 seconds.
Done sleeping 5 seconds.
Total execution time is 5.0 second(s)

... Function "conc_futures_thrd_with_executor_map()" completed!
(end)

9) function 'conc_futures_thrd_with_max_workers' - same as 'conc_futures_thrd_with_executor_map' except that we are passing the
   "max_workers" value to the threaded function.  

   Creates 10 futures objects with varying time.sleep() value, longest of which is five seconds.

   RESULT:  For this function, we assigned max_workers=5  - this causes our ThreadPool to allow "only"  5 futures objects to run concurrently
   causing the execution time to run LONGER than the desired 5 seconds.  The test here shows total execution time of  9 seconds. 

(begin)
... Executing Function "conc_futures_thrd_with_max_workers()" ...

max_workers = 5

Sleeping 5 second(s)...
Sleeping 4 second(s)...
Sleeping 3 second(s)...
Sleeping 2 second(s)...
Sleeping 1 second(s)...
Sleeping 2 second(s)...
Sleeping 3 second(s)...
Sleeping 4 second(s)...
Sleeping 1 second(s)...
Sleeping 5 second(s)...
Done sleeping 5 seconds.
Done sleeping 4 seconds.
Done sleeping 3 seconds.
Done sleeping 2 seconds.
Done sleeping 1 seconds.
Done sleeping 2 seconds.
Done sleeping 3 seconds.
Done sleeping 4 seconds.
Done sleeping 1 seconds.
Done sleeping 5 seconds.
Total execution time is 9.01 second(s)

... Function "conc_futures_thrd_with_max_workers()" completed!
(end)
